{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { CountUp } from 'countup.js';\nimport { isPlatformBrowser } from '@angular/common';\nlet CountUpDirective = /*#__PURE__*/(() => {\n  class CountUpDirective {\n    constructor(el, zone, platformId) {\n      this.el = el;\n      this.zone = zone;\n      this.platformId = platformId;\n      this.options = {};\n      this.reanimateOnClick = true;\n      // eslint-disable-next-line @angular-eslint/no-output-native\n      this.complete = new EventEmitter();\n    }\n    // Re-animate if preference is set.\n    onClick() {\n      if (this.reanimateOnClick) {\n        this.animate();\n      }\n    }\n    ngOnChanges(changes) {\n      // don't animate server-side (universal)\n      if (!isPlatformBrowser(this.platformId)) {\n        return;\n      }\n      const {\n        options,\n        endVal\n      } = changes;\n      if (endVal?.currentValue !== undefined) {\n        if (this.countUp !== undefined) {\n          this.zone.runOutsideAngular(() => {\n            this.countUp.update(this.endVal);\n          });\n        } else {\n          this.initAndRun();\n        }\n      } else if (options?.currentValue !== undefined) {\n        this.initAndRun();\n      }\n    }\n    animate() {\n      this.zone.runOutsideAngular(() => {\n        this.countUp.reset();\n        this.countUp.start(() => {\n          this.zone.run(() => {\n            this.complete.emit();\n          });\n        });\n      });\n    }\n    initAndRun() {\n      this.zone.runOutsideAngular(() => {\n        this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);\n        if (!this.options.enableScrollSpy) {\n          this.animate();\n        }\n      });\n    }\n  }\n  CountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n    return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  CountUpDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CountUpDirective,\n    selectors: [[\"\", \"countUp\", \"\"]],\n    hostBindings: function CountUpDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function CountUpDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      endVal: [\"countUp\", \"endVal\"],\n      options: \"options\",\n      reanimateOnClick: \"reanimateOnClick\"\n    },\n    outputs: {\n      complete: \"complete\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return CountUpDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CountUpModule = /*#__PURE__*/(() => {\n  class CountUpModule {}\n  CountUpModule.ɵfac = function CountUpModule_Factory(t) {\n    return new (t || CountUpModule)();\n  };\n  CountUpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CountUpModule\n  });\n  CountUpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return CountUpModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of count-up\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CountUpDirective, CountUpModule };\n//# sourceMappingURL=ngx-countup.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}